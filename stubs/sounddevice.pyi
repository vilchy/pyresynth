from typing import Any
from _typeshed import Incomplete
import numpy.typing as npt


def play(data: npt.ArrayLike, samplerate: int | float | None = ..., mapping: npt.ArrayLike |
         None = ..., blocking: bool = ..., loop: bool = ..., **kwargs: Any) -> None: ...


def rec(frames: Incomplete | None = ..., samplerate: Incomplete | None = ..., channels: Incomplete | None = ..., dtype: Incomplete |
        None = ..., out: Incomplete | None = ..., mapping: Incomplete | None = ..., blocking: bool = ..., **kwargs): ...
def playrec(data, samplerate: Incomplete | None = ..., channels: Incomplete | None = ..., dtype: Incomplete | None = ..., out: Incomplete |
            None = ..., input_mapping: Incomplete | None = ..., output_mapping: Incomplete | None = ..., blocking: bool = ..., **kwargs): ...


def wait(ignore_errors: bool = ...): ...
def stop(ignore_errors: bool = ...) -> None: ...
def get_status(): ...
def get_stream(): ...
def query_devices(device: Incomplete | None = ...,
                  kind: Incomplete | None = ...): ...


def query_hostapis(index: Incomplete | None = ...): ...


def check_input_settings(device: Incomplete | None = ..., channels: Incomplete | None = ..., dtype: Incomplete |
                         None = ..., extra_settings: Incomplete | None = ..., samplerate: Incomplete | None = ...) -> None: ...
def check_output_settings(device: Incomplete | None = ..., channels: Incomplete | None = ..., dtype: Incomplete |
                          None = ..., extra_settings: Incomplete | None = ..., samplerate: Incomplete | None = ...) -> None: ...


def sleep(msec) -> None: ...
def get_portaudio_version(): ...


class _StreamBase:
    def __init__(self, kind, samplerate: Incomplete | None = ..., blocksize: Incomplete | None = ..., device: Incomplete | None = ..., channels: Incomplete | None = ..., dtype: Incomplete | None = ..., latency: Incomplete | None = ..., extra_settings: Incomplete | None = ..., callback: Incomplete | None = ...,
                 finished_callback: Incomplete | None = ..., clip_off: Incomplete | None = ..., dither_off: Incomplete | None = ..., never_drop_input: Incomplete | None = ..., prime_output_buffers_using_stream_callback: Incomplete | None = ..., userdata: Incomplete | None = ..., wrap_callback: Incomplete | None = ...) -> None: ...

    @property
    def samplerate(self): ...
    @property
    def blocksize(self): ...
    @property
    def device(self): ...
    @property
    def channels(self): ...
    @property
    def dtype(self): ...
    @property
    def samplesize(self): ...
    @property
    def latency(self): ...
    @property
    def active(self): ...
    @property
    def stopped(self): ...
    @property
    def closed(self): ...
    @property
    def time(self): ...
    @property
    def cpu_load(self): ...
    def __enter__(self): ...
    def __exit__(self, *args) -> None: ...
    def start(self) -> None: ...
    def stop(self, ignore_errors: bool = ...) -> None: ...
    def abort(self, ignore_errors: bool = ...) -> None: ...
    def close(self, ignore_errors: bool = ...) -> None: ...


class RawInputStream(_StreamBase):
    def __init__(self, samplerate: Incomplete | None = ..., blocksize: Incomplete | None = ..., device: Incomplete | None = ..., channels: Incomplete | None = ..., dtype: Incomplete | None = ..., latency: Incomplete | None = ..., extra_settings: Incomplete | None = ...,
                 callback: Incomplete | None = ..., finished_callback: Incomplete | None = ..., clip_off: Incomplete | None = ..., dither_off: Incomplete | None = ..., never_drop_input: Incomplete | None = ..., prime_output_buffers_using_stream_callback: Incomplete | None = ...) -> None: ...

    @property
    def read_available(self): ...
    def read(self, frames): ...


class RawOutputStream(_StreamBase):
    def __init__(self, samplerate: Incomplete | None = ..., blocksize: Incomplete | None = ..., device: Incomplete | None = ..., channels: Incomplete | None = ..., dtype: Incomplete | None = ..., latency: Incomplete | None = ..., extra_settings: Incomplete | None = ...,
                 callback: Incomplete | None = ..., finished_callback: Incomplete | None = ..., clip_off: Incomplete | None = ..., dither_off: Incomplete | None = ..., never_drop_input: Incomplete | None = ..., prime_output_buffers_using_stream_callback: Incomplete | None = ...) -> None: ...

    @property
    def write_available(self): ...
    def write(self, data): ...


class RawStream(RawInputStream, RawOutputStream):
    def __init__(self, samplerate: Incomplete | None = ..., blocksize: Incomplete | None = ..., device: Incomplete | None = ..., channels: Incomplete | None = ..., dtype: Incomplete | None = ..., latency: Incomplete | None = ..., extra_settings: Incomplete | None = ...,
                 callback: Incomplete | None = ..., finished_callback: Incomplete | None = ..., clip_off: Incomplete | None = ..., dither_off: Incomplete | None = ..., never_drop_input: Incomplete | None = ..., prime_output_buffers_using_stream_callback: Incomplete | None = ...) -> None: ...


class InputStream(RawInputStream):
    def __init__(self, samplerate: Incomplete | None = ..., blocksize: Incomplete | None = ..., device: Incomplete | None = ..., channels: Incomplete | None = ..., dtype: Incomplete | None = ..., latency: Incomplete | None = ..., extra_settings: Incomplete | None = ...,
                 callback: Incomplete | None = ..., finished_callback: Incomplete | None = ..., clip_off: Incomplete | None = ..., dither_off: Incomplete | None = ..., never_drop_input: Incomplete | None = ..., prime_output_buffers_using_stream_callback: Incomplete | None = ...) -> None: ...

    def read(self, frames): ...


class OutputStream(RawOutputStream):
    def __init__(self, samplerate: Incomplete | None = ..., blocksize: Incomplete | None = ..., device: Incomplete | None = ..., channels: Incomplete | None = ..., dtype: Incomplete | None = ..., latency: Incomplete | None = ..., extra_settings: Incomplete | None = ...,
                 callback: Incomplete | None = ..., finished_callback: Incomplete | None = ..., clip_off: Incomplete | None = ..., dither_off: Incomplete | None = ..., never_drop_input: Incomplete | None = ..., prime_output_buffers_using_stream_callback: Incomplete | None = ...) -> None: ...

    def write(self, data): ...


class Stream(InputStream, OutputStream):
    def __init__(self, samplerate: Incomplete | None = ..., blocksize: Incomplete | None = ..., device: Incomplete | None = ..., channels: Incomplete | None = ..., dtype: Incomplete | None = ..., latency: Incomplete | None = ..., extra_settings: Incomplete | None = ...,
                 callback: Incomplete | None = ..., finished_callback: Incomplete | None = ..., clip_off: Incomplete | None = ..., dither_off: Incomplete | None = ..., never_drop_input: Incomplete | None = ..., prime_output_buffers_using_stream_callback: Incomplete | None = ...) -> None: ...


class DeviceList(tuple):
    ...


class CallbackFlags:
    def __init__(self, flags: int = ...) -> None: ...
    def __bool__(self) -> bool: ...
    def __ior__(self, other): ...
    @property
    def input_underflow(self): ...
    @input_underflow.setter
    def input_underflow(self, value) -> None: ...
    @property
    def input_overflow(self): ...
    @input_overflow.setter
    def input_overflow(self, value) -> None: ...
    @property
    def output_underflow(self): ...
    @output_underflow.setter
    def output_underflow(self, value) -> None: ...
    @property
    def output_overflow(self): ...
    @output_overflow.setter
    def output_overflow(self, value) -> None: ...
    @property
    def priming_output(self): ...


class _InputOutputPair:
    def __init__(self, parent, default_attr) -> None: ...
    def __getitem__(self, index): ...
    def __setitem__(self, index, value) -> None: ...


class default:
    device: Incomplete
    channels: Incomplete
    dtype: Incomplete
    latency: Incomplete
    extra_settings: Incomplete
    samplerate: Incomplete
    blocksize: Incomplete
    clip_off: bool
    dither_off: bool
    never_drop_input: bool
    prime_output_buffers_using_stream_callback: bool
    def __init__(self) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    @property
    def hostapi(self): ...
    def reset(self) -> None: ...


class PortAudioError(Exception):
    ...


class CallbackStop(Exception):
    ...


class CallbackAbort(Exception):
    ...


class AsioSettings:
    def __init__(self, channel_selectors) -> None: ...


class CoreAudioSettings:
    def __init__(self, channel_map: Incomplete | None = ..., change_device_parameters: bool = ...,
                 fail_if_conversion_required: bool = ..., conversion_quality: str = ...) -> None: ...


class WasapiSettings:
    def __init__(self, exclusive: bool = ...) -> None: ...


class _CallbackContext:
    blocksize: Incomplete
    data: Incomplete
    out: Incomplete
    frame: int
    input_channels: Incomplete
    output_channels: Incomplete
    input_dtype: Incomplete
    output_dtype: Incomplete
    input_mapping: Incomplete
    output_mapping: Incomplete
    silent_channels: Incomplete
    loop: Incomplete
    event: Incomplete
    status: Incomplete
    def __init__(self, loop: bool = ...) -> None: ...
    def check_data(self, data, mapping, device): ...
    def check_out(self, out, frames, channels, dtype, mapping): ...
    def callback_enter(self, status, data) -> None: ...
    def read_indata(self, indata) -> None: ...
    def write_outdata(self, outdata) -> None: ...
    def callback_exit(self) -> None: ...
    def finished_callback(self) -> None: ...
    stream: Incomplete
    def start_stream(self, StreamClass, samplerate, channels,
                     dtype, callback, blocking, **kwargs) -> None: ...

    def wait(self, ignore_errors: bool = ...): ...
